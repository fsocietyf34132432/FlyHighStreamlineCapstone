@model FlyHighStreamlineCapstone.ViewModel.FlightViewModel

@{
    ViewData["Title"] = "Create";
}



<h4>Add Flight</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="FlightNo" class="control-label"></label>
                <input asp-for="FlightNo" class="form-control" />
                <span asp-validation-for="FlightNo" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="DepartureTime" class="control-label"></label>
                <input asp-for="DepartureTime" class="form-control" />
                <span asp-validation-for="DepartureTime" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ArrivalTime" class="control-label"></label>
                <input asp-for="ArrivalTime" class="form-control" />
                <span asp-validation-for="ArrivalTime" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Duration" class="control-label"></label>
                <input asp-for="Duration" class="form-control" readonly />
                <span asp-validation-for="Duration" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Status" class="control-label"></label>
                <input asp-for="Status" class="form-control" />
                <span asp-validation-for="Status" class="text-danger"></span>
            </div>
           
            <div class="form-group">
                <label asp-for="DepartureAirportId" class="control-label"></label>
                <select asp-for="DepartureAirportId" class="form-control" asp-items="ViewBag.DepartureAirportId">
                    <option value="">-- Select Departure Airport --</option>
                </select>
            </div>
            <div class="form-group">
                <label asp-for="ArrivalAirportId" class="control-label"></label>
                <select asp-for="ArrivalAirportId" class="form-control" asp-items="ViewBag.ArrivalAirportId">
                    <option value="">-- Select Arrival Airport --</option>
                </select>
            </div>
            <div class="form-group">
                <label asp-for="AirlineId" class="control-label"></label>
                <select asp-for="AirlineId" class="form-control" asp-items="ViewBag.AirlineId">
                    <option value="">-- Select Airline --</option>
                </select>
            </div>
            <div class="form-group">
                <label asp-for="AircraftId" class="control-label"></label>
                <select asp-for="AircraftId" class="form-control" asp-items="ViewBag.AircraftId">
                    <option value="">-- Select Aircraft --</option>
                </select>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', (event) => {
            const form = document.querySelector('form');
            const departureAirportId = document.getElementById('DepartureAirportId');
            const arrivalAirportId = document.getElementById('ArrivalAirportId');
            const departureTimeInput = document.getElementById('DepartureTime');
            const arrivalTimeInput = document.getElementById('ArrivalTime');
            const durationInput = document.getElementById('Duration');

            function calculateDuration() {
                try {
                    // Check if both input fields have values
                    if (!departureTimeInput.value || !arrivalTimeInput.value) {
                        durationInput.value = ""; // Clear the duration field if inputs are empty
                        return;
                    }

                    // Parse dates using Moment.js
                    const departureDateTime = moment(departureTimeInput.value);
                    const arrivalDateTime = moment(arrivalTimeInput.value);

                    // Ensure arrival is after departure
                    if (arrivalDateTime <= departureDateTime) {
                        durationInput.value = "Invalid: Arrival before Departure";
                        return;
                    }

                    // Calculate the time difference in milliseconds
                    const timeDiffMs = arrivalDateTime - departureDateTime;

                    // Convert milliseconds to hours and minutes
                    const hours = Math.floor(timeDiffMs / (1000 * 60 * 60));
                    const minutes = Math.floor((timeDiffMs % (1000 * 60 * 60)) / (1000 * 60));

                    // Format the duration string
                    const durationStr = `${hours} hour${hours !== 1 ? 's' : ''} ${minutes} minute${minutes !== 1 ? 's' : ''}`;

                    // Update the duration input field
                    durationInput.value = durationStr;
                } catch (error) {
                    console.error("Error calculating duration:", error);
                    durationInput.value = "";
                }
            }

            function validateForm(event) {
                if (departureAirportId.value === arrivalAirportId.value) {
                    event.preventDefault();
                    alert('Departure and Arrival Airports cannot be the same.');
                } else {
                    const departureTime = moment(departureTimeInput.value).format('HH:mm'); // Extract only time
                    const arrivalTime = moment(arrivalTimeInput.value).format('HH:mm');

                    if (departureTime === arrivalTime) {
                        event.preventDefault();
                        alert('Departure and Arrival Time cannot be the same.');
                    }
                }
            }

            departureTimeInput.addEventListener('input', calculateDuration);
            arrivalTimeInput.addEventListener('input', calculateDuration);

            // Attach event listener to the form submission
            form.addEventListener('submit', (event) => {
                // Recalculate duration and validate form before submitting
                calculateDuration();
                validateForm(event);

                // If duration is invalid, prevent form submission (this check is already in calculateDuration)
                // if (durationInput.value === "Invalid: Arrival before Departure") {
                //     event.preventDefault();
                // }
            });

            calculateDuration(); // Initial calculation
        });
    </script>
}